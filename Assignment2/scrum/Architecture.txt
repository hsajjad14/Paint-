# Please discuss your architectural decisions below.

High Level Architecture:

	MVC
	To keep the code simple, a partial MVC was implemented.
	
	Model
	The Model captures enough information to re-draw the sketch of
	the user.
	
	View+Controller
	There is a View class as well as a few, what we call, view components.
	The View class captures the Stage as well
	as containing all of its components.
	View components are meant to be contained in the main View.
	Examples of view components are PaintPanel and ShapeChooserPanel.
	
	The View class, and view components all implements their own controller.
	For example, the PaintPanel listens to its own MouseEvents.
	This is instead of separating out the Controller from the View. This choice
	was made to simplify the code, yet still keep it modular and clear.
	
	Each view component can see the containing View as well as the Model
	as appropriate. This means that each view component can speak to the
	other view components. An example of this is when the ShapeChooserPanel
	buttons are clicked, resulting in a mode change in the PaintPanel.
	
---------------------------------------------------------------------
TODO!!! Add in more architecture and discussion. For example, 
do you do something interesting to fix the association between the 
ShapeChooser and the PaintPanel? How about the PaintModel, something
is clearly wrong with it. Can you come up with a better architecture?

SEE BELOW:
Essentially, the way our archetecture is that ShapechooserPannel will select
a mode. After that, the user will draw on the graphic causing each MouseEvent to 
trigger the appropirate MouseCommand in turn returning the correct ShapeStrategy.
Each shapestrategy is created using a ShapeBuilderFactory. Moreover in PaintModel, the shapes are drawn by calling a ShapeCommand. The shapes are
stacked in the PaintModel and are called in Repaint(). This is executed using PainModel.DrawingCommand(s,g).

---------------------------------------------------------------------

DESIGN PATTERNS USED
	TODO!!! If you introduce a Design Pattern to solve a problem, 
	discuss it below. Only add design patterns if they simplify and improve
	the code. I see at least two that would greatly improve code. 
		
	Strategy: Each shape had its own strategy. which understood MouseEvents. (SquareStrategy, CircleStrategy etc..).
	
	Command: We have used Command Strategy three times. The first was to centralize the mousecommands
	from each of the shape strategies (DragCommand, PressedCommand, etc...). The handler command in paintpannel
	would call the appropriate method within PaintPannel to execute the appropriate command. The secon way in which
	Command was used was to fix the drawing structure of PaintModel. Essentially, you can see that through PaintModel.DrawingCommand(p,g),
	the model can draw itself using the individual shape commands called in ConcreteDrawingCommand. The third place in which
	Command was used was to fix the association between shapemodifiers and PaintPannel. This was accomplished by wrapping them
	in a DrawingCommand called "ShapeModifierCommand"
	
	Singleton:
	Composite:
	
	Factory: The primary way in which this was used was to build shapes. It
	 was called in PainPannel.MousePressed(e). The way in which this was used was
	that PressedCommand(e) created a shape however, we had to check the the type of the 
	shape  in order to associate it with the correct attribute. This method of building
	a shape was ineffecient therefore, we created a ShapeBuilderFactory which would create
	the appropriate shape and assign it to the proper attribute of PaintPannel.   
	Builder:
	Observer/Observable:
	... (any others you find useful) ...

OTHER ARCHITECTURE DISCUSSIONS
